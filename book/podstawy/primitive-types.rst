***************
Primitive types
***************

Variables and Constants
=======================

Declaring variables
-------------------
.. code-block:: python

    my_variable = 10
    my_variable = 'ehlo world'

Declaring constants
-------------------
.. code-block:: python

    MY_CONSTANT = 10
    MY_CONSTANT = 'ehlo world'

Variables vs. Constants
-----------------------
* JedynƒÖ r√≥≈ºnicƒÖ jest konwencja nazewnicza
* Sta≈Çe zapisujemy du≈ºymi literami
* Zmienne zapisujemy ma≈Çymi literami

Types
-----
* Od Python 3.5 wprowadzono nowƒÖ sk≈Çadniƒô
* Nowa sk≈Çadnia nie jest wymagana (ale jest dobrƒÖ praktykƒÖ)
* Nowa sk≈Çadnia uruchomiona w Python przed 3.5 rzuci SyntaxError
* Tw√≥rcy jƒôzyka m√≥wƒÖ, ≈ºe typy nigdy nie bƒôdƒÖ wymagane
* Aby sprawdziƒá poprawno≈õƒá trzeba u≈ºyƒá bibliotek zewnƒôtrznych tj: ``mypy`` lub ``pyre``
* Typy mo≈ºna znale≈∫ƒá w wielu funkcjach w bibliotece standardowej
* Dobre IDE podpowiada typy i informuje o b≈Çƒôdach

.. code-block:: python

    name: str = 'Jos√© Jim√©nez'
    age: int = 30

Type inference
--------------
* Static Typing (Java, C++, Swift)

.. code-block:: java

    String name = new String("Jose Jimenez")

* Dynamic Typing (Python, PHP, Ruby)

.. code-block:: python

    name: str = str('Jose Jimenez')  # Type annotations
    name = str()

    # Type annotations (type hinting not forcing)
    # this will work, but IDE should warn
    name: str = 10

Numerical types
===============

``int``
-------
* Liczba ca≈Çkowita
* Funkcja ``int()`` kowertuje argument na ``int``
* W Python 3 ``int`` nie ma maksymalnej warto≈õci (dynamicznie siƒô rozszerza)

.. code-block:: python

    age = 30
    age: int = 30

    int(10)  # 10
    int(10.0)  # 10
    int(10.9)  # 10

    milion = 1000000
    milion = 1_000_000
    milion = 1e6

``float``
---------
* Liczba zmiennoprzecinkowa
* Funkcja ``float()`` konwertuje argument na ``float``

.. code-block:: python

    float(10)  # 10.0

    float('+1.23')  # 1.23
    float('-1.23')  # -1.23
    float('   -123.45\n')  # -123.45

    float('1e-003')  # 0.001
    float('+1E6')  # 1000000.0

    float('-inf')  # -inf
    float('-Infinity')  # -inf
    float('inf')  # inf
    float('Infinity')  # inf

``complex``
-----------
* Liczba zespolona (czƒô≈õƒá rzeczywista i urojona)
* Notacja in≈ºynierska ``j`` a nie matematyczna ``i``
* W ciƒÖgu nie mo≈ºe byƒá spacji

.. code-block:: python

    complex('1+2j')  # (1+2j)
    complex('1 + 2j')  # ValueError: complex() arg is a malformed string


Character types
===============

``str``
-------
* CiƒÖg (≈Ça≈Ñcuch) znak√≥w
* Funkcja ``str()`` konwertuje argument na ``str``

.. code-block:: python

    name = 'Jos√©'  # 'Jos√©'
    name = "Jos√©"  # 'Jos√©'
    name: str = 'Jos√©'  # 'Jos√©'

    str(1969)  # '1969'
    str(13.37)  # '13.37'

    name = """
        Jos√© Jim√©nez
        Max Peck
        Ivan Ivanovic
    """  # '\nMax Peck\nMax Peck\nIvan Ivanovic'

Single or double quote?
-----------------------
* Python nie rozr√≥≈ºnia czy stosujemy pojedyncze znaki cudzys≈Çowiu czy podw√≥jne.
* Wa≈ºne jest aby wybraƒá jednƒÖ konwencjƒô i siƒô¬†jej konsekwentnie trzymaƒá.
* Interpreter Pythona domy≈õlnie stosuje pojedyncze znaki cudzys≈Çowia.
* Z tego powodu w tej ksiƒÖ≈ºce bƒôdziemy trzymaƒá siƒô powy≈ºszej konwencji.
* Ma to znaczenie przy ``doctest``, kt√≥ry zawsze korzysta z pojedynczych i rzuca errorem jak sƒÖ podw√≥jne

.. code-block:: python

    print('it\'s Jos√©\'s book')
    print("it's Jos√©'s book")

.. code-block:: python

    print('<a href="http://python.astrotech.io">Python and Machine Learning</a>')

Escape characters
-----------------
.. code-block:: text

    \n
    \r
    \r\n

.. figure:: img/type-machine.jpg
    :scale: 50%
    :align: center

    Why we have '\\r\\n' on Windows?

.. code-block:: text

    üöÄ
    \x1F680  # after \x goes hexadecimal number
    \u1F680  # after \u goes four hexadecimal numbers
    \b1010   # after \b goes bytes
    \t
    \'

Characters before strings
-------------------------
.. code-block:: python

    f'hello {first_name}, how are you?'  # since Python 3.6
    u'za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ'  # Used in Python 2, now doesn't have any effect
    r'(?P<foo>)\n'  # escapes does not matters
    r'C:\Users\Admin\file.txt'  # without ``r`` this have problems with \Users (invalid hex for unicode character)
    b'this is text'

Wprowadzanie znak√≥w od u≈ºytkownika
----------------------------------
* Spacja na ko≈Ñcu prompt
* ``input()`` zawsze zwraca ``str``

.. code-block:: python

    name = input('Type your name: ')

Niemutowalno≈õƒá
--------------
* Wa≈ºnƒÖ cechƒÖ ciƒÖg√≥w znakowych jest tzw. niemutowalno≈õƒá.
* Gdy wykonujemy operacjƒô na stringu tworzona jest jego nowa kopia.
* Zw√≥ƒá uwagƒô ile string√≥w jest przechowywanych w pamiƒôci

.. code-block:: python

    name = 'Jos√©'
    name += 'Jim√©nez'
    print(name)
    # Jos√© Jim√©nez



Operacje na stringach
---------------------
* ``split()``

    .. code-block:: python

        >>> 'ehlo world'.split()
        ['ehlo', 'world']

        >>> text = 'ehlo,world'
        >>> text.split(',')
        ['ehlo', 'world']

* ``strip()``, ``lstrip()``, ``rstrip()``
    .. code-block:: python

        >>> name = '    Max Peck    '
        >>> name.strip()
        'Max Peck'
        >>> name.lstrip()
        'Max Peck    '
        >>> name.rstrip()
        '    Max Peck'

* ``startswith()``
    .. code-block:: python

        name = 'Jos√© Jim√©nez'

        if name.startswith('Jos√©'):
            print('My name Jos√© Jim√©nez')
        else:
            print('Noname')

* ``join()``
    .. code-block:: python

        >>> names = ['Jos√©', 'Max', 'Ivan', str(1961), '1969']
        >>> ';'.join(names)
        'Jos√©;Max;Ivan;1961;1969'


* ``title()``, ``lower()``, ``upper()``
    .. code-block:: python

        >>> name = 'joS√© jiM√©nEz'

        >>> name.title()
        'Jos√© Jim√©nez'

        >>> name.upper()
        'JOS√â JIM√âNEZ'

        >>> name.lower()
        'jos√© jim√©nez'

.. note:: bardzo przydatne do czyszczenia danych przed analizƒÖ lub Machine Learning

* ``replace()``
    .. code-block:: python

        >>> name = 'Jos√© Jim√©nez'
        >>> name.replace('J', 'j')
        'jos√© jim√©nez'

Wycinanie czƒô≈õci string√≥w
-------------------------
.. code-block:: python

    >>> text = 'Lorem ipsum'

    >>> text[2]
    'r'

    >>> text[:2]
    'Lo'

    >>> text[0:3]
    'Lor'

    >>> text[1:4]
    'ore'

    >>> text[-3]
    's'

    >>> text[-3:]
    'sum'

    >>> text[-3:-1]
    'su'

    >>> text[:-2]
    'Lorem ips'

``io``
------

``io`` to biblioteka do obs≈Çugi strumienia wej≈õciowego i wyj≈õciowego. StringIO jest wtedy traktowany jak plik wej≈õciowy.

.. code-block:: python

    import io

    io.StringIO

Logiczne typy danych
====================

``bool`` - Warto≈õƒá¬†logiczna
---------------------------
Obiekt typu ``bool`` mo≈ºe przyjƒÖƒá dwie warto≈õci logiczne:

* ``True``
* ``False``

Zwr√≥ƒá uwagƒô na wielko≈õƒá¬†liter!

``bool()`` to tak≈ºe funkcja wbudowana w jƒôzyk Python, kt√≥ra zwraca warto≈õƒá¬†logicznƒÖ wyra≈ºenia.

``None`` - Warto≈õƒá¬†pusta
------------------------
Wa≈ºne: nie jest to warto≈õƒá ``False`` ani ``0``.
Wyobra≈∫ sobie, ≈ºe masz bazƒô danych z u≈ºytkownikami.
Gdy u≈ºytkownik nie poda wieku, to jest to warto≈õƒá ``None``.

.. code-block:: python

    wiek = None

    if wiek is None:
        print('u≈ºytkownik nie poda≈Ç wieku')

    if not wiek:
        print('user does not')


Assignments
===========

.. note:: Pobaw siƒô opcjami w IDE:

    * Run in console
    * Run...
    * Debug...
    * Python Console

Zmienne i typy
--------------
#. Wczytaj od u≈ºytkownika imiƒô
#. U≈ºytkownik wprowadza tylko dane typu ``str``
#. Wy≈õwietl na ekranie ``'My name "IMIE".\nI hope you\'re ok!'``, gdzie IMIE to warto≈õƒá kt√≥rƒÖ poda≈Ç
#. Zwr√≥ƒá uwagƒô na cudzys≈Çowia i nowƒÖ liniƒô
#. Podmie≈Ñ wszystkie spacje na ``_``
#. Nie korzystaj z dodawania string√≥w ``str + str``

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``type-print.py``
    * Linii kodu do napisania: oko≈Ço 2 linie
    * Maksymalny czas na zadanie: 5 min

:Podpowied≈∫:
    * U≈ºyj podawania string√≥w po przecinku ``print(str, str)`` oraz parametru ``sep``
    * U≈ºyj f-string formatting dla Python >= 3.6

User input and type casting
---------------------------
#. U≈ºytkownik za pomocƒÖ wprowadza odleg≈Ço≈õci w metrach
#. U≈ºytkownik wprowadza tylko dane typu ``int`` lub ``float``
#. Napisz program kt√≥ry przekonwertuje odleg≈Ço≈õci i wy≈õwietli je w formacie ``dict`` zgodnie z szablonem:

.. code-block:: python

    print({
        'kilometers': int,
        'miles': float,
        'nautical miles': float,
        'all': [int, float, float]
    })

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``types-casting.py``
    * Linii kodu do napisania: oko≈Ço 3 linie
    * Maksymalny czas na zadanie: 5 min

:Podpowied≈∫:
    * 1000 m = 1 km
    * 1608 m = 1 mila
    * 1852 m = 1 mila morska

Wyrazy
------
#. Napisz program, kt√≥ry na podstawie paragrafu tekstu "Lorem Ipsum" podzieli go na zdania
#. Kropka rozdziela zdania
#. Spacja oddziela wyrazy w zdaniu
#. Dla ka≈ºdego zdania wy≈õwietli ile jest w nim wyraz√≥w::

    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``type-split-text.py``
    * Linii kodu do napisania: oko≈Ço 3 linie
    * Maksymalny czas na zadanie: 5 min

:Co zadanie sprawdza:
    * dzielenie string√≥w
    * sprawdzanie d≈Çugo≈õci linii
    * iterowanie po elementach w tablicy

:Podpowied≈∫:
    * ``len(...)`` - Length of the list
    * .. code-block:: python

        lista = ['Element 1', 'Element 2']

        for element in lista:
            print(element)