"Syntax", "Description"
"``.``", "(Dot.) In the default mode, this matches any character except a newline"
"``^``", "(Caret.) Matches the start of the string, and in MULTILINE mode also matches immediately after each newline"
"``$``", "Matches the end of the string or just before the newline at the end of the string, and in MULTILINE mode also matches before a newline"
"``*``", "Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible"
"``+``", "Causes the resulting RE to match 1 or more repetitions of the preceding RE"
"``?``", "Causes the resulting RE to match 0 or 1 repetitions of the preceding RE"
"``*?``, ``+?``, ``??``", " Adding ? after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched"
"``{m}``", "Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match."
"``{m,n}``", "Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible."
"``{m,n}?``", "Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as few repetitions as possible."
"``\``", "Either escapes special characters (permitting you to match characters like '*', '?', and so forth), or signals a special sequence"
"``[a-z]``", "any character from ``a`` to ``z``"
"``[A-Z]``", "any character from ``A`` to ``Z``"
"``[0-9]``", "any digit from ``0`` to ``9``"
"``[abc]``", "will match ``a``, ``b`` or ``c``"
"``|``", "``A|B``, where A and B can be arbitrary REs, creates a regular expression that will match either A or B."
"``(...)``", "Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group"
"``(?P<name>...)``", "substring matched by the group is accessible via the symbolic group name name"
"``(?P=name)``", "A backreference to a named group; it matches whatever text was matched by the earlier group named name. ``(?P<quote>['"]).*?(?P=quote)`` or ``(?P<quote>['"]).*?\1``"
"``\number``", "Matches the contents of the group of the same number. Groups are numbered starting from 1. For example, ``(.+) \1`` matches ``the the`` or ``55 55``, but not ``thethe`` (note the space after the group)."
"``\d``", "Matches any Unicode decimal digit. This includes [0-9], and also many other digit characters"
"``\s``", "Matches Unicode whitespace characters (which includes [ \t\n\r\f\v], and also many other characters, for example the non-breaking spaces)"
"``\w``", "Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore"