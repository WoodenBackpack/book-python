*****
Types
*****


Variables and constants
=======================

Variable declaration
--------------------
.. code-block:: python

    my_variable = 10
    my_variable = 'ehlo world'

Constant declaration
--------------------
.. code-block:: python

    MY_CONSTANT = 10
    MY_CONSTANT = 'ehlo world'

Variables vs. constants
-----------------------
* JedynƒÖ r√≥≈ºnicƒÖ jest konwencja nazewnicza
* Sta≈Çe zapisujemy du≈ºymi literami
* Zmienne zapisujemy ma≈Çymi literami

Types
-----
* Od Python 3.5 wprowadzono nowƒÖ sk≈Çadniƒô
* Nowa sk≈Çadnia nie jest wymagana (ale jest dobrƒÖ praktykƒÖ)
* Nowa sk≈Çadnia uruchomiona w Python przed 3.5 rzuci SyntaxError
* Tw√≥rcy jƒôzyka m√≥wƒÖ, ≈ºe typy nigdy nie bƒôdƒÖ wymagane
* Aby sprawdziƒá poprawno≈õƒá trzeba u≈ºyƒá bibliotek zewnƒôtrznych tj: ``mypy`` lub ``pyre``
* Typy mo≈ºna znale≈∫ƒá w wielu funkcjach w bibliotece standardowej
* Dobre IDE podpowiada typy i informuje o b≈Çƒôdach

.. code-block:: python

    name: str = 'Jos√© Jim√©nez'
    age: int = 30

Type inference
--------------
* Static Typing (Java, C++, Swift)

.. code-block:: java

    String name = new String("Jos√© Jim√©nez")

* Dynamic Typing (Python, PHP, Ruby)

.. code-block:: python

    name = str('Jos√© Jim√©nez')

.. code-block:: python

    name: str = str('Jos√© Jim√©nez')  # Type annotations

    # Type annotations (type hinting not forcing)
    # this will work, but IDE should warn
    name: str = 10


Numerical types
===============

``int``
-------
* Liczba ca≈Çkowita
* Funkcja ``int()`` kowertuje argument na ``int``
* W Python 3 ``int`` nie ma maksymalnej warto≈õci (dynamicznie siƒô rozszerza)

.. code-block:: python

    age = 30
    age: int = 30

    int(10)  # 10
    int(10.0)  # 10
    int(10.9)  # 10

    milion = 1000000
    milion = 1_000_000
    milion = 1e6

``float``
---------
* Liczba zmiennoprzecinkowa
* Funkcja ``float()`` konwertuje argument na ``float``

.. code-block:: python

    float(10)  # 10.0

    float('+1.23')  # 1.23
    float('-1.23')  # -1.23
    float('   -123.45\n')  # -123.45

    float('1e-003')  # 0.001
    float('+1E6')  # 1000000.0

    float('-inf')  # -inf
    float('-Infinity')  # -inf
    float('inf')  # inf
    float('Infinity')  # inf

``complex``
-----------
* Liczba zespolona (czƒô≈õƒá rzeczywista i urojona)
* Notacja in≈ºynierska ``j`` a nie matematyczna ``i``
* W ciƒÖgu nie mo≈ºe byƒá spacji

.. code-block:: python

    complex('1+2j')  # (1+2j)
    complex('1 + 2j')  # ValueError: complex() arg is a malformed string


Logical types
=============

``bool``
--------
* Warto≈õƒá¬†logiczna
* Funkcja ``bool()`` konwertuje argument na ``bool``
* Zwr√≥ƒá uwagƒô na wielko≈õƒá¬†liter

.. code-block:: python

    True
    False

``None``
--------
* Warto≈õƒá¬†pusta
* Nie jest to warto≈õƒá ``False`` ani ``0``
* Jest u≈ºywany, gdy warto≈õƒá jest nieustawiona

.. code-block:: python

    name = None

    if name is None:
        print('What is your name?')

    if not wiek:
        print('What is your name?')


Character types
===============

``str``
-------
* CiƒÖg (≈Ça≈Ñcuch) znak√≥w
* Funkcja ``str()`` konwertuje argument na ``str``

.. code-block:: python

    name = 'Jos√©'  # 'Jos√©'
    name = "Jos√©"  # 'Jos√©'
    name: str = 'Jos√©'  # 'Jos√©'

    str(1969)  # '1969'
    str(13.37)  # '13.37'

    name = """
        Jos√© Jim√©nez
        Max Peck
        Ivan Ivanovic
    """  # '\nMax Peck\nMax Peck\nIvan Ivanovic\n'

    'Jos√©' * 3  # Jos√©Jos√©Jos√©

Single or double quote?
-----------------------
* Python nie rozr√≥≈ºnia czy stosujemy pojedyncze znaki cudzys≈Çowiu czy podw√≥jne.
* Wa≈ºne jest aby wybraƒá jednƒÖ konwencjƒô i siƒô¬†jej konsekwentnie trzymaƒá.
* Interpreter Pythona domy≈õlnie stosuje pojedyncze znaki cudzys≈Çowia.
* Z tego powodu w tej ksiƒÖ≈ºce bƒôdziemy trzymaƒá siƒô powy≈ºszej konwencji.
* Ma to znaczenie przy ``doctest``, kt√≥ry zawsze korzysta z pojedynczych i rzuca errorem jak sƒÖ podw√≥jne

.. code-block:: python

    my_str = 'it\'s Jos√©\'s book'
    my_str = "it's Jos√©'s book"

.. code-block:: python

    my_str = '<a href="http://python.astrotech.io">Python and Machine Learning</a>'

Escape characters
-----------------
.. code-block:: text

    \n
    \r
    \r\n

.. figure:: img/type-machine.jpg
    :scale: 50%
    :align: center

    Why we have '\\r\\n' on Windows?

.. code-block:: text

    \x1F680  # after \x goes hexadecimal number
    \u1F680  # after \u goes four hexadecimal numbers
    üöÄ
    \b1010   # after \b goes bytes
    \t
    \'

Characters before strings
-------------------------
* ``'C:\Users\Admin\file.txt'`` problem with ``\Users`` (``sers`` is invalid hexadecimal for unicode)
* Format string: since Python 3.6

.. csv-table:: String modifiers
    :header-rows: 1
    :widths: 10, 10, 80

    "Modifier", "Name",  "Description"
    "``f'...'``", "Format string", "String interpolation (variable substitution), since Python 3.6"
    "``u'...'``", "Unicode string", "Used in Python 2, now only for compatibility"
    "``b'...'``", "Bytes string",  "Use ``b'...'.encode('utf-8')`` for convertion to unicode"
    "``r'...'``", "Raw string", "Escapes does not matters"

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    f'My name {name}'
    u'za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ'
    b'this is text'
    r'(?P<foo>)\n'
    r'C:\Users\Admin\file.txt'

``print()``
-----------
* Prints on the screen
* More in :numref:`Print Formatting`

.. code-block:: python

    print('My name Jos√© Jim√©nez')  # My name Jos√© Jim√©nez

    name = 'Jos√© Jim√©nez'
    print(f'My name {name}')  # My name Jos√© Jim√©nez

String immutability
-------------------
* ``str`` jest niemutowalny
* Ka≈ºda operacja na ``str`` tworzy nowƒÖ kopiƒô
* Zwr√≥ƒá uwagƒô ile string√≥w jest przechowywanych w pamiƒôci

.. code-block:: python

    name = 'Jos√©'
    name += ' Jim√©nez'
    print(name)  # Jos√© Jim√©nez

String methods
--------------

``split()``
^^^^^^^^^^^
.. code-block:: python

    'ehlo world'.split()  # ['ehlo', 'world']

    text = 'ehlo,world'
    text.split(',')  # ['ehlo', 'world']

``strip()``, ``lstrip()``, ``rstrip()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

    name = '    Max Peck    '
    name.strip()  # 'Max Peck'
    name.lstrip()  # 'Max Peck    '
    name.rstrip()  # '    Max Peck'

``startswith()``
^^^^^^^^^^^^^^^^
* starts_with

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    if name.startswith('Jos√©'):
        print('My name Jos√© Jim√©nez')
    else:
        print('I have no name')

``join()``
^^^^^^^^^^
.. code-block:: python

    names = ['Jos√©', 'Max', 'Ivan', str(1961), '1969']
    ';'.join(names)  # 'Jos√©;Max;Ivan;1961;1969'

``title()``, ``lower()``, ``upper()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* Przydatne do czyszczenia danych przed analizƒÖ lub Machine Learning
* Przyk≈Çad:

    * 'Jana III Sobieskiego 1/2'
    * 'ul. Jana III Sobieskiego 1/2'
    * 'Ul. Jana III Sobieskiego 1/2'
    * 'UL. Jana III Sobieskiego 1/2'
    * 'os. Jana III Sobieskiego 1/2'
    * 'Jana 3 Sobieskiego 1/2'
    * 'Jana 3ego Sobieskiego 1/2'
    * 'Jana III Sobieskiego 1 m. 2'
    * 'Jana III Sobieskiego 1 apt 2'
    * 'Jana Iii Sobieskiego 1/2'
    * 'Jana IIi Sobieskiego 1/2'

.. code-block:: python

    name = 'joS√© jiM√©nEz'
    name.title()  # 'Jos√© Jim√©nez'
    name.upper()  # 'JOS√â JIM√âNEZ'
    name.lower()  # 'jos√© jim√©nez'

``replace()``
^^^^^^^^^^^^^
.. code-block:: python

    name = 'Jos√© Jim√©nez'
    name.replace('J', 'j')  # 'jos√© jim√©nez'

String splicing
---------------
.. code-block:: python

    text = 'Lorem ipsum'
    text[2]  # 'r'
    text[:2]  # 'Lo'
    text[0:3]  # 'Lor'
    text[1:4]  # 'ore'
    text[-3]  # 's'
    text[-3:]  # 'sum'
    text[-3:-1]  # 'su'
    text[:-2]  # 'Lorem ips'
    text[::2]  # 'Lrmism'
    text[::-1]  # muspi meroL

Handling user input
-------------------
* Funkcja ``input()`` zawsze zwraca ``str``
* Pamiƒôtaj o spacji na ko≈Ñcu prompt

.. code-block:: python

    name = input('Type your name: ')


Assignments
===========

Basic usage of ``print()`` function
-----------------------------------
#. Za pomocƒÖ ``print()`` wypisz liniƒô sk≈ÇadajƒÖcƒÖ siƒô z 50 my≈õlnik√≥w
#. Wykorzystaj mno≈ºenie string√≥w

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``types_print.py``
    * Szacunkowa d≈Çugo≈õƒá kodu: 1 linia
    * Maksymalny czas na zadanie: 2 min

Variables and types
-------------------
#. Wczytaj od u≈ºytkownika imiƒô
#. U≈ºytkownik wprowadza tylko dane typu ``str``
#. Za pomocƒÖ f-string formatting wy≈õwietl na ekranie ``'My name "IMIE".\nI hope you\'re ok!'``, gdzie IMIE to warto≈õƒá kt√≥rƒÖ poda≈Ç
#. Zwr√≥ƒá uwagƒô na znaki cudzys≈Çowia i nowych linii
#. Tekst wy≈õwietlony na ekranie ma mieƒá zamienione wszystkie spacje na ``_``
#. Nie korzystaj z dodawania string√≥w ``str + str``

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``types_input.py``
    * Szacunkowa d≈Çugo≈õƒá kodu: 3 linie
    * Maksymalny czas na zadanie: 5 min

:Co zadanie sprawdza?:
    * Definiowanie zmiennych
    * Korzystanie z print formatting
    * Wczytywanie tekstu od u≈ºytkownika

Handling user input and type casting
------------------------------------
#. U≈ºytkownik za pomocƒÖ wprowadza odleg≈Ço≈õci w metrach
#. U≈ºytkownik wprowadza tylko dane typu ``int`` lub ``float``
#. Dane przy wy≈õwietlaniu muszƒÖ byƒá przekonwertowane do typ√≥w podanych poni≈ºej
#. Napisz program kt√≥ry przekonwertuje odleg≈Ço≈õci i wy≈õwietli je w formacie zgodnie z szablonem:

.. code-block:: python

    print(f'Meters: {meters}')  # int
    print(f'Kilometers: {...}')  # int
    print(f'Miles: {...}')  # float
    print(f'Nautical Miles: {...}')  # float
    print(f'All: {...}, {...}, {...}, {...}')  # int, int, float, float

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``types_casting.py``
    * Szacunkowa d≈Çugo≈õƒá kodu: 3 linie
    * Maksymalny czas na zadanie: 5 min

:Co zadanie sprawdza?:
    * Definiowanie zmiennych
    * Korzystanie z print formatting
    * Konwersja typ√≥w
    * Operacje matematyczne na zmiennych
    * Wczytywanie tekstu od u≈ºytkownika

:Podpowied≈∫:
    * 1000 m = 1 km
    * 1608 m = 1 mila
    * 1852 m = 1 mila morska

Text manipulation
-----------------
#. Napisz program, kt√≥ry na podstawie paragrafu tekstu "Lorem Ipsum" podzieli go na zdania
#. Kropka rozdziela zdania
#. Spacja oddziela wyrazy w zdaniu
#. Za pomocƒÖ funkcji ``len()`` policz ile jest wyraz√≥w w ka≈ºdym zdaniu::

    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

:Za≈Ço≈ºenia:
    * Nazwa pliku: ``types_strings.py``
    * Szacunkowa d≈Çugo≈õƒá kodu: 3 linie
    * Maksymalny czas na zadanie: 5 min

:Co zadanie sprawdza:
    * Dzielenie string√≥w
    * Sprawdzanie d≈Çugo≈õci ciƒÖg√≥w znak√≥w
    * Iterowanie po elementach w tablicy

:Podpowied≈∫:
    * .. code-block:: python

        lista = ['Element 1', 'Element 2']

        for element in lista:
            print(element)
